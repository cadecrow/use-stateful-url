{"version":3,"file":"useStatefulUrl.umd.js","sources":["../src/useStatefulUrl.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\n\n// Types\nexport interface HashStateOptions<T = Record<string, unknown>> {\n\t/** Delay in ms before updating URL to avoid too frequent updates */\n\tdebounceMs?: number;\n\t/** Whether to use pushState instead of replaceState */\n\tusePushState?: boolean;\n\t/** Custom serializer functions */\n\tserializers?: HashSerializers<T>;\n\t/** Whether to initialize state on mount (default: true) */\n\tinitializeOnMount?: boolean;\n\t/** Delimiters to isolate useStatefulUrl content from existing hash params */\n\tdelimiters?: {\n\t\tstart?: string;\n\t\tend?: string;\n\t};\n\t/** Position strategy for useStatefulUrl content (default: 'end') */\n\tpositionStrategy?: \"preserve\" | \"end\" | \"start\";\n}\n\nexport interface HashSerializers<T = Record<string, unknown>> {\n\t/** Serialize state to URL hash params */\n\tserialize?: (state: T) => Record<string, string>;\n\t/** Deserialize URL hash params to state */\n\tdeserialize?: (params: URLSearchParams) => T;\n}\n\nexport interface useStatefulUrlReturn<T> {\n\t/** Current state */\n\tstate: T;\n\t/** Update state (will also update URL) */\n\tsetState: (newState: T | ((prevState: T) => T)) => void;\n\t/** Whether the hook has been initialized from URL */\n\tisInitialized: boolean;\n\t/** Manually sync current state to URL */\n\tsyncToUrl: () => void;\n\t/** Clear hash from URL and reset to initial state */\n\tclearHash: () => void;\n\t/** Get the current hash without useStatefulUrl content */\n\tgetHashWithoutState: () => string;\n\t/** Get only the useStatefulUrl content from hash */\n\tgetStateFromHash: () => string;\n}\n\n// Utility functions for common serialization patterns\nexport const hashSerializers = {\n\t/** Serialize arrays as comma-separated strings */\n\tstringArray: {\n\t\tserialize: (value: string[]) => value.join(\",\"),\n\t\tdeserialize: (value: string) => (value ? value.split(\",\") : []),\n\t},\n\n\t/** Serialize Set as comma-separated strings */\n\tstringSet: {\n\t\tserialize: (value: Set<string>) => Array.from(value).join(\",\"),\n\t\tdeserialize: (value: string) => new Set(value ? value.split(\",\") : []),\n\t},\n\n\t/** Serialize boolean values */\n\tboolean: {\n\t\tserialize: (value: boolean) => value.toString(),\n\t\tdeserialize: (value: string) => value === \"true\",\n\t},\n\n\t/** Serialize number values */\n\tnumber: {\n\t\tserialize: (value: number) => value.toString(),\n\t\tdeserialize: (value: string) => {\n\t\t\tconst num = Number(value);\n\t\t\treturn isNaN(num) ? 0 : num;\n\t\t},\n\t},\n\n\t/** Serialize objects as JSON */\n\tjson: {\n\t\tserialize: (value: Record<string, unknown>) => JSON.stringify(value),\n\t\tdeserialize: (value: string): Record<string, unknown> | null => {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value) as Record<string, unknown>;\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t},\n};\n\n// Default serializer for simple objects\nconst defaultSerializer = {\n\tserialize: (state: Record<string, unknown>): Record<string, string> => {\n\t\tconst result: Record<string, string> = {};\n\n\t\tfor (const [key, value] of Object.entries(state)) {\n\t\t\tif (value == null) continue;\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tif (value.length > 0) {\n\t\t\t\t\tresult[key] = value.join(\",\");\n\t\t\t\t}\n\t\t\t} else if (value instanceof Set) {\n\t\t\t\tif (value.size > 0) {\n\t\t\t\t\tresult[key] = Array.from(value).join(\",\");\n\t\t\t\t}\n\t\t\t} else if (typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tdeserialize: <T extends Record<string, unknown>>(\n\t\tparams: URLSearchParams,\n\t\tinitialState: T\n\t): T => {\n\t\tconst result = { ...initialState };\n\n\t\tfor (const [key, value] of Array.from(params.entries())) {\n\t\t\tif (key in initialState) {\n\t\t\t\tconst initialValue = initialState[key];\n\n\t\t\t\tif (Array.isArray(initialValue)) {\n\t\t\t\t\t(result as Record<string, unknown>)[key] = value\n\t\t\t\t\t\t? value.split(\",\")\n\t\t\t\t\t\t: [];\n\t\t\t\t} else if (initialValue instanceof Set) {\n\t\t\t\t\t(result as Record<string, unknown>)[key] = new Set(\n\t\t\t\t\t\tvalue ? value.split(\",\") : []\n\t\t\t\t\t);\n\t\t\t\t} else if (typeof initialValue === \"boolean\") {\n\t\t\t\t\t(result as Record<string, unknown>)[key] = value === \"true\";\n\t\t\t\t} else if (typeof initialValue === \"number\") {\n\t\t\t\t\tconst num = Number(value);\n\t\t\t\t\t(result as Record<string, unknown>)[key] = isNaN(num)\n\t\t\t\t\t\t? initialValue\n\t\t\t\t\t\t: num;\n\t\t\t\t} else if (typeof initialValue === \"object\" && initialValue !== null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t(result as Record<string, unknown>)[key] = JSON.parse(\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t) as unknown;\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t(result as Record<string, unknown>)[key] = initialValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t(result as Record<string, unknown>)[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n};\n\n// Utility functions\nconst isClient = () => typeof window !== \"undefined\";\n\n// Default delimiters for isolating useStatefulUrl content\nconst DEFAULT_DELIMITERS = {\n\tstart: \"__UHS-\",\n\tend: \"-UHS__\",\n};\n\nconst extractStatefulHashParts = (\n\thash: string,\n\tdelimiters = DEFAULT_DELIMITERS\n) => {\n\tconst startDelim = delimiters.start;\n\tconst endDelim = delimiters.end;\n\n\tconst startIndex = hash.indexOf(startDelim);\n\tconst endIndex = hash.indexOf(endDelim);\n\n\tif (startIndex === -1 || endIndex === -1 || endIndex <= startIndex) {\n\t\treturn {\n\t\t\tbefore: hash,\n\t\t\tstatefulHash: \"\",\n\t\t\tafter: \"\",\n\t\t\tdelimiters,\n\t\t};\n\t}\n\n\treturn {\n\t\tbefore: hash.substring(0, startIndex),\n\t\tstatefulHash: hash.substring(startIndex + startDelim.length, endIndex),\n\t\tafter: hash.substring(endIndex + endDelim.length),\n\t\tdelimiters,\n\t};\n};\n\nconst parseStatefulHash = (\n\tdelimiters = DEFAULT_DELIMITERS\n): URLSearchParams => {\n\tif (!isClient()) return new URLSearchParams();\n\n\tconst hash = window.location.hash.substring(1);\n\tconst { statefulHash } = extractStatefulHashParts(hash, delimiters);\n\n\treturn new URLSearchParams(statefulHash);\n};\n\nconst updateStatefulHash = (\n\tparams: Record<string, string>,\n\tusePushState = false,\n\tdelimiters = DEFAULT_DELIMITERS,\n\tpositionStrategy: \"preserve\" | \"end\" | \"start\" = \"end\"\n) => {\n\tif (!isClient()) return;\n\n\tconst currentHash = window.location.hash.substring(1);\n\tconst {\n\t\tbefore,\n\t\tafter,\n\t\tstatefulHash: existingState,\n\t} = extractStatefulHashParts(currentHash, delimiters);\n\n\tconst urlParams = new URLSearchParams();\n\n\t// Only add non-empty values\n\tfor (const [key, value] of Object.entries(params)) {\n\t\tif (value && value.length > 0) {\n\t\t\turlParams.set(key, value);\n\t\t}\n\t}\n\n\tconst stateContent = urlParams.toString();\n\n\t// Reconstruct hash based on position strategy\n\tlet newHash = \"\";\n\n\tif (stateContent) {\n\t\tconst delimitedContent = delimiters.start + stateContent + delimiters.end;\n\n\t\tswitch (positionStrategy) {\n\t\t\tcase \"start\":\n\t\t\t\tnewHash =\n\t\t\t\t\tdelimitedContent +\n\t\t\t\t\t(before || after ? (before || \"\") + (after || \"\") : \"\");\n\t\t\t\tbreak;\n\t\t\tcase \"end\":\n\t\t\t\tconst externalContent = (before || \"\") + (after || \"\");\n\t\t\t\tnewHash =\n\t\t\t\t\texternalContent + (externalContent ? \"\" : \"\") + delimitedContent;\n\t\t\t\tbreak;\n\t\t\tcase \"preserve\":\n\t\t\tdefault:\n\t\t\t\t// Preserve original position, or append to end if first time\n\t\t\t\tif (existingState) {\n\t\t\t\t\t// Replace in original position\n\t\t\t\t\tnewHash = before + delimitedContent + after;\n\t\t\t\t} else {\n\t\t\t\t\t// First time: append to end\n\t\t\t\t\tconst externalContent = (before || \"\") + (after || \"\");\n\t\t\t\t\tnewHash =\n\t\t\t\t\t\texternalContent + (externalContent ? \"\" : \"\") + delimitedContent;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t// No state content, just return external content\n\t\tnewHash = (before || \"\") + (after || \"\");\n\t}\n\n\tconst newUrl = newHash\n\t\t? `#${newHash}`\n\t\t: window.location.pathname + window.location.search;\n\n\tif (usePushState) {\n\t\twindow.history.pushState(null, \"\", newUrl);\n\t} else {\n\t\twindow.history.replaceState(null, \"\", newUrl);\n\t}\n};\n\n// Utility functions for hash manipulation\nexport const hashUtils = {\n\t/** Get the current hash without useStatefulUrl content */\n\tgetHashWithoutState: (delimiters = DEFAULT_DELIMITERS): string => {\n\t\tif (!isClient()) return \"\";\n\n\t\tconst hash = window.location.hash.substring(1);\n\t\tconst { before, after } = extractStatefulHashParts(hash, delimiters);\n\n\t\treturn before + after;\n\t},\n\n\t/** Get only the useStatefulUrl content from hash */\n\tgetStateFromHash: (delimiters = DEFAULT_DELIMITERS): string => {\n\t\tif (!isClient()) return \"\";\n\n\t\tconst hash = window.location.hash.substring(1);\n\t\tconst { statefulHash } = extractStatefulHashParts(hash, delimiters);\n\n\t\treturn statefulHash;\n\t},\n\n\t/** Check if hash contains useStatefulUrl content */\n\thasHashState: (delimiters = DEFAULT_DELIMITERS): boolean => {\n\t\tif (!isClient()) return false;\n\n\t\tconst hash = window.location.hash.substring(1);\n\t\treturn hash.includes(delimiters.start) && hash.includes(delimiters.end);\n\t},\n\n\t/** Safely update the non-useStatefulUrl portion of the hash */\n\tsetExternalHash: (\n\t\tnewExternalHash: string,\n\t\tdelimiters = [DEFAULT_DELIMITERS],\n\t\tusePushState = false\n\t): void => {\n\t\tif (!isClient()) return;\n\n\t\tconst statefulHashes: string[] = [];\n\t\tconst currentHash = window.location.hash.substring(1);\n\t\tfor (const delimiter of delimiters) {\n\t\t\tconst { statefulHash } = extractStatefulHashParts(currentHash, delimiter);\n\t\t\tif (statefulHash) {\n\t\t\t\tstatefulHashes.push(delimiter.start + statefulHash + delimiter.end);\n\t\t\t}\n\t\t}\n\n\t\tconst statefulUrl = statefulHashes.join(\"\");\n\n\t\tlet newHash = newExternalHash;\n\t\tif (statefulUrl) {\n\t\t\t// Add delimiter and useStatefulUrl content to the end for consistency\n\t\t\tnewHash += statefulUrl;\n\t\t}\n\n\t\tconst newUrl = newHash\n\t\t\t? `#${newHash}`\n\t\t\t: window.location.pathname + window.location.search;\n\n\t\tif (usePushState) {\n\t\t\twindow.history.pushState(null, \"\", newUrl);\n\t\t} else {\n\t\t\twindow.history.replaceState(null, \"\", newUrl);\n\t\t}\n\n\t\t// Trigger hashchange event for useStatefulUrl to pick up the change\n\t\twindow.dispatchEvent(new HashChangeEvent(\"hashchange\"));\n\t},\n};\n\n// Debounce utility\nconst useDebounce = <T extends unknown[]>(\n\tcallback: (...args: T) => void,\n\tdelay: number\n) => {\n\tconst timeoutRef = useRef<ReturnType<typeof setTimeout> | undefined>(\n\t\tundefined\n\t);\n\n\treturn useCallback(\n\t\t(...args: T) => {\n\t\t\tif (timeoutRef.current) {\n\t\t\t\tclearTimeout(timeoutRef.current);\n\t\t\t}\n\n\t\t\ttimeoutRef.current = setTimeout(() => {\n\t\t\t\tcallback(...args);\n\t\t\t}, delay);\n\t\t},\n\t\t[callback, delay]\n\t);\n};\n\n/**\n * Custom hook for managing state synchronized with URL hash parameters\n *\n * @param initialState - Initial state object\n * @param options - Configuration options\n * @returns Object with state, setState, and utility functions\n */\nexport function useStatefulUrl<T extends Record<string, unknown>>(\n\tinitialState: T,\n\toptions: HashStateOptions<T> = {}\n): useStatefulUrlReturn<T> {\n\tconst {\n\t\tdebounceMs = 100,\n\t\tusePushState = false,\n\t\tserializers,\n\t\tinitializeOnMount = true,\n\t\tdelimiters = DEFAULT_DELIMITERS,\n\t\tpositionStrategy = \"end\",\n\t} = options;\n\n\t// Ensure delimiters have default values for function calls - memoize to prevent re-renders\n\tconst resolvedDelimiters = useMemo(\n\t\t() => ({\n\t\t\tstart: delimiters.start || DEFAULT_DELIMITERS.start,\n\t\t\tend: delimiters.end || DEFAULT_DELIMITERS.end,\n\t\t}),\n\t\t[delimiters.start, delimiters.end]\n\t);\n\n\tconst [state, setStateInternal] = useState<T>(initialState);\n\tconst [isInitialized, setIsInitialized] = useState(false);\n\tconst isInitializedRef = useRef(false);\n\n\t// Extract serializer functions and their string representations for ESLint\n\tconst serializeFn = serializers?.serialize;\n\tconst deserializeFn = serializers?.deserialize;\n\tconst serializeString = serializeFn?.toString();\n\tconst deserializeString = deserializeFn?.toString();\n\n\t// Memoize serializers to prevent infinite re-renders when defined inline\n\tconst memoizedSerializers = useMemo(() => {\n\t\tif (!serializeFn && !deserializeFn) return null;\n\n\t\t// Create stable references for the serializer functions\n\t\treturn { serialize: serializeFn, deserialize: deserializeFn };\n\t\t// preventing linter ignore for now - eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [serializeString, deserializeString]);\n\n\t// Use memoized serializers if provided, otherwise use default\n\tconst serialize = useMemo(() => {\n\t\treturn memoizedSerializers?.serialize || defaultSerializer.serialize;\n\t}, [memoizedSerializers?.serialize]);\n\tconst deserialize = useMemo(() => {\n\t\treturn (\n\t\t\tmemoizedSerializers?.deserialize ||\n\t\t\t((params: URLSearchParams) =>\n\t\t\t\tdefaultSerializer.deserialize(params, initialState))\n\t\t);\n\t}, [memoizedSerializers?.deserialize, initialState]);\n\n\t// Debounced URL update function - memoize the callback to prevent infinite re-renders\n\tconst updateHashCallback = useCallback(\n\t\t(newState: T) => {\n\t\t\tif (!isInitializedRef.current) return;\n\n\t\t\tconst serialized = serialize(newState);\n\t\t\tupdateStatefulHash(\n\t\t\t\tserialized,\n\t\t\t\tusePushState,\n\t\t\t\tresolvedDelimiters,\n\t\t\t\tpositionStrategy\n\t\t\t);\n\t\t},\n\t\t[serialize, usePushState, resolvedDelimiters, positionStrategy]\n\t);\n\n\tconst debouncedUpdateHash = useDebounce(updateHashCallback, debounceMs);\n\n\t// Initialize state from URL hash on mount\n\tuseEffect(() => {\n\t\tif (!initializeOnMount || !isClient()) {\n\t\t\tsetIsInitialized(true);\n\t\t\tisInitializedRef.current = true;\n\t\t\treturn;\n\t\t}\n\n\t\tconst params = parseStatefulHash(resolvedDelimiters);\n\t\tconst initializedState = deserialize(params);\n\n\t\tsetStateInternal(initializedState);\n\t\tsetIsInitialized(true);\n\t\tisInitializedRef.current = true;\n\t}, [initializeOnMount, deserialize, resolvedDelimiters]);\n\n\t// Update URL when state changes (only after initialization)\n\tuseEffect(() => {\n\t\tif (!isInitialized) return;\n\t\tdebouncedUpdateHash(state);\n\t}, [state, isInitialized, debouncedUpdateHash]);\n\n\t// Handle browser navigation\n\tuseEffect(() => {\n\t\tif (!isClient() || !isInitialized) return;\n\n\t\tconst handleHashChange = () => {\n\t\t\tconst params = parseStatefulHash(resolvedDelimiters);\n\t\t\tconst newState = deserialize(params);\n\t\t\tsetStateInternal(newState);\n\t\t};\n\n\t\twindow.addEventListener(\"hashchange\", handleHashChange);\n\t\treturn () => window.removeEventListener(\"hashchange\", handleHashChange);\n\t}, [isInitialized, deserialize, resolvedDelimiters]);\n\n\t// State setter function\n\tconst setState = useCallback((newState: T | ((prevState: T) => T)) => {\n\t\tsetStateInternal((prev) => {\n\t\t\tconst nextState =\n\t\t\t\ttypeof newState === \"function\"\n\t\t\t\t\t? (newState as (prevState: T) => T)(prev)\n\t\t\t\t\t: newState;\n\t\t\treturn nextState;\n\t\t});\n\t}, []);\n\n\t// Utility functions\n\tconst syncToUrl = useCallback(() => {\n\t\tconst serialized = serialize(state);\n\t\tupdateStatefulHash(serialized, usePushState, resolvedDelimiters, positionStrategy);\n\t}, [state, serialize, usePushState, resolvedDelimiters, positionStrategy]);\n\n\tconst clearHash = useCallback(() => {\n\t\tif (!isClient()) return;\n\n\t\t// Clear only the useStatefulUrl portion, preserve existing hash content\n\t\tconst currentHash = window.location.hash.substring(1);\n\t\tconst { before, after } = extractStatefulHashParts(currentHash, resolvedDelimiters);\n\t\tconst newHash = before + after;\n\n\t\tconst newUrl = newHash\n\t\t\t? `#${newHash}`\n\t\t\t: window.location.pathname + window.location.search;\n\t\twindow.history.replaceState(null, \"\", newUrl);\n\t\tsetStateInternal(initialState);\n\t}, [initialState, resolvedDelimiters]);\n\n\tconst getHashWithoutState = useCallback(() => {\n\t\treturn hashUtils.getHashWithoutState(resolvedDelimiters);\n\t}, [resolvedDelimiters]);\n\n\tconst getStateFromHash = useCallback(() => {\n\t\treturn hashUtils.getStateFromHash(resolvedDelimiters);\n\t}, [resolvedDelimiters]);\n\n\treturn {\n\t\tstate,\n\t\tsetState,\n\t\tisInitialized,\n\t\tsyncToUrl,\n\t\tclearHash,\n\t\tgetHashWithoutState,\n\t\tgetStateFromHash,\n\t};\n}\n\n// Convenience hooks for common patterns\nexport function useStatefulUrlArray<T extends string>(\n\tkey: string,\n\tinitialValue: T[] = [],\n\tvalidValues?: T[]\n) {\n\tconst initialState = { [key]: initialValue };\n\n\tconst options: HashStateOptions<typeof initialState> = {\n\t\tserializers: {\n\t\t\tserialize: (state) => ({\n\t\t\t\t[key]: state[key]?.length > 0 ? state[key].join(\",\") : \"\",\n\t\t\t}),\n\t\t\tdeserialize: (params) => {\n\t\t\t\tconst value = params.get(key);\n\t\t\t\tconst array = value ? value.split(\",\") : [];\n\t\t\t\tconst filtered = validValues\n\t\t\t\t\t? array.filter((item) => validValues.includes(item as T))\n\t\t\t\t\t: array;\n\t\t\t\treturn { [key]: filtered as T[] };\n\t\t\t},\n\t\t},\n\t};\n\n\tconst { state, setState, ...rest } = useStatefulUrl(initialState, options);\n\n\treturn {\n\t\tvalue: state[key] as T[],\n\t\tsetValue: (newValue: T[] | ((prev: T[]) => T[])) => {\n\t\t\tsetState((prev) => ({\n\t\t\t\t...prev,\n\t\t\t\t[key]: typeof newValue === \"function\" ? newValue(prev[key]) : newValue,\n\t\t\t}));\n\t\t},\n\t\t...rest,\n\t};\n}\n\nexport function useStatefulUrlSet<T extends string>(\n\tkey: string,\n\tinitialValue: Set<T> = new Set(),\n\tvalidValues?: T[]\n) {\n\tconst initialState = { [key]: initialValue };\n\n\tconst options: HashStateOptions<typeof initialState> = {\n\t\tserializers: {\n\t\t\tserialize: (state) => ({\n\t\t\t\t[key]: state[key]?.size > 0 ? Array.from(state[key]).join(\",\") : \"\",\n\t\t\t}),\n\t\t\tdeserialize: (params) => {\n\t\t\t\tconst value = params.get(key);\n\t\t\t\tconst array = value ? value.split(\",\") : [];\n\t\t\t\tconst filtered = validValues\n\t\t\t\t\t? array.filter((item) => validValues.includes(item as T))\n\t\t\t\t\t: array;\n\t\t\t\treturn { [key]: new Set(filtered as T[]) };\n\t\t\t},\n\t\t},\n\t};\n\n\tconst { state, setState, ...rest } = useStatefulUrl(initialState, options);\n\n\treturn {\n\t\tvalue: state[key] as Set<T>,\n\t\tsetValue: (newValue: Set<T> | ((prev: Set<T>) => Set<T>)) => {\n\t\t\tsetState((prev) => ({\n\t\t\t\t...prev,\n\t\t\t\t[key]: typeof newValue === \"function\" ? newValue(prev[key]) : newValue,\n\t\t\t}));\n\t\t},\n\t\t...rest,\n\t};\n}\n\nexport function useStatefulUrlString(key: string, initialValue: string = \"\") {\n\tconst initialState = { [key]: initialValue };\n\n\tconst { state, setState, ...rest } = useStatefulUrl(initialState);\n\n\treturn {\n\t\tvalue: state[key] as string,\n\t\tsetValue: (newValue: string | ((prev: string) => string)) => {\n\t\t\tsetState((prev) => ({\n\t\t\t\t...prev,\n\t\t\t\t[key]: typeof newValue === \"function\" ? newValue(prev[key]) : newValue,\n\t\t\t}));\n\t\t},\n\t\t...rest,\n\t};\n}\n"],"names":["useRef","useCallback","useMemo","useState","useEffect"],"mappings":"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"}